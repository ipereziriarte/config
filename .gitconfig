[user]
	name = Imanol Pérez Iriarte
	email = eltigrequehayenti@gmail.com

[core]
	# Use custom `.gitignore` and `.gitattributes`
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of
	# a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	excludesfile = /Users/imanol/.gitignore_global

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = true
	branch = auto
	diff = auto
	status = auto

[color "branch"]
	current = yellow black
	local = yellow
	remote = magenta

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red reverse
	new = green reverse
	whitespace = white reverse

[color "status"]
	added = green
	changed = yellow
	untracked = cyan reverse

[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format
	s = status -s
	st = status
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	co = checkout
	cia = commit -a
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Amends last commit with the index skipping the message editting
	fixlast = commit --amend --no-edit
	# Show verbose output about tags, branches or remotes
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	graph = log --graph --pretty=oneline --abbrev-commit
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Interactive rebase with the given number of latest commits
	ri = "!r() { git rebase -i HEAD~$1; }; r"
	rc = "rebase --continue"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# Deletes local merged branches except for master and develop
  	bclean = "!git branch --merged | grep -v \"*\" | grep -v master | grep -v develop | xargs -n 1 git branch -d"
  	# Deletes local merged branches (bclean) and branches remote references to deleted branches
  	roomba = "!f() { git fetch --prune; git bclean ; }; f"
  	# Deletes a branch locally and remotely (forced)
  	nuke = !sh -c 'git branch -D $1 && git push origin :$1' -

  	# Nicer logs
 	lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
 	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
 	lg = !"git lg1"

 	# Commits current changes with a "WIP" message
	wip = commit -am "WIP"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v


[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[fetch]
	prune = true

[help]
	autocorrect = 1

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"

[push]
	default = matching

[hub]
	protocol = https

[credential]

[rerere]
	enabled = true
